#!/bin/bash

# Prints shell input lines as they are read.
# set -v

# Exit immediately if a command exits with a non-zero status
set -e

###########
# INSTALL #
###########

php --version

# Fail if we're not using php73+
if ! (php --version | grep -q "PHP 7.") ; then
    echo "You're not using PHP 7.3+, please install it."
    php --version
    exit 1
fi

# https://github.com/bbc/certee-fetch/
certee-fetch

echo "Validating Cosmos dials..."
cosmos-release check-dials

composer config -g github-oauth.github.com $OAUTH
# composer with dev dependencies
composer --no-ansi --no-interaction install

npm install

# Compile static assets
npm run gulp-ci

bin/phpunit --no-coverage
vendor/bin/phpcs -n
npm run lint
vendor/bin/phpstan analyse -c phpstan.neon src tests --level=4 --memory-limit=512M

# if build is trigger through a webhook we can stop here after the code analysers are run.
if [[ ! -z "$CODEBUILD_WEBHOOK_ACTOR_ACCOUNT_ID" ]]
then
 exit 0
fi

# install composer for production
export SYMFONY_ENV=prod;
export APP_ENV=prod;
sudo /usr/local/bin/composer --no-ansi --no-interaction --no-dev --optimize-autoloader --prefer-dist install

# Some directories are not required in the RPM so we can empty them
rm -rf var/* docs/* tests/*

#########
# BUILD #
#########

# Get the next release version from cosmos API.
version=`cosmos-release generate-version programmes-frontend`

# Build the RPM
mbt -r 7 -s rpmbuild -v ${version}

##############
# POST BUILD #
##############

# SVGs are copied in a separate step below as their mime type must be explicitly specified

echo "Publishing assets..."
aws s3 sync web/assets s3://$STATIC_ASSETS_BUCKET/programmes-frontend --cache-control "public, max-age=31622400, immutable"

echo 'COSMOS-RELEASE: Sending RPM to cosmos.....'
cosmos-release service programmes-frontend RPMS/*.rpm --release-version v

# Deploy the RPM if DEPLOY_TO is set
if [[ ! -z "$DEPLOY_TO" ]]
then
    if [[ ${DEPLOY_TO,,} == "int" ]] || [[ ${DEPLOY_TO,,} == "test" ]] || [[ ${DEPLOY_TO,,} == "stage" ]];
    then
        echo "Deploying enabled. Deploying programmes-frontend $version to ${DEPLOY_TO,,}"
        curl --cert /etc/pki/tls/certs/client.crt --key /etc/pki/tls/private/client.key \
        https://cosmos.api.bbci.co.uk/env/${DEPLOY_TO,,}/component/programmes-frontend/deploy_release \
        -d "{\"release_version\": \"$version\"}" -H 'Content-Type: application/json' -X POST
    else
        echo "Deployment error, please leave it empty if you only want to build otherwise use one of the valid environments: int, test or stage"
    fi
fi

exit 0
